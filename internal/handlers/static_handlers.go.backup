package handlers

import (
	"fmt"
	"log"
	"net/http"
	"strings"

	"lil-rag/internal/theme"
)

// Static serves the home page at /
func (h *Handler) Static() http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		if r.URL.Path != "/" {
			http.NotFound(w, r)
			return
		}

		// Use new template system if available
		if h.renderer != nil {
			data := &theme.TemplateData{
				Title:   "Home",
				Version: h.version,
				PageName: "home",
			}
			
			w.Header().Set("Content-Type", "text/html")
			if err := h.renderer.RenderPage(w, "home.html", data); err != nil {
				log.Printf("Template rendering error: %v", err)
				h.fallbackHomePage(w, r)
			}
			return
		}
		
		// Fallback to original HTML
		h.fallbackHomePage(w, r)
	}
}

// fallbackHomePage serves the original home page HTML as fallback
func (h *Handler) fallbackHomePage(w http.ResponseWriter, r *http.Request) {
		html := `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Lil-RAG - Simple RAG System</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 1000px;
            margin: 0 auto;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }

        .nav-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            background: rgba(255,255,255,0.1);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 15px 25px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        }

        .nav-links {
            display: flex;
            gap: 15px;
        }

        .nav-link {
            color: white;
            text-decoration: none;
            padding: 8px 16px;
            border-radius: 8px;
            font-weight: 500;
            transition: all 0.2s ease;
            background: rgba(255,255,255,0.1);
            border: 1px solid rgba(255,255,255,0.2);
        }

        .nav-link:hover {
            background: rgba(255,255,255,0.2);
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(255,255,255,0.2);
        }

        .nav-link.active {
            background: rgba(255,255,255,0.3);
            border-color: rgba(255,255,255,0.4);
        }

        .logo {
            color: white;
            font-size: 1.2em;
            font-weight: 700;
            text-decoration: none;
        }

        .container {
            background: white;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            padding: 40px;
            margin-bottom: 20px;
        }

        h1 {
            color: #2c3e50;
            border-bottom: 3px solid #007AFF;
            padding-bottom: 10px;
            margin-bottom: 30px;
            text-align: center;
        }

        .subtitle {
            text-align: center;
            color: #666;
            font-size: 1.1em;
            margin-bottom: 40px;
        }

        .quick-actions {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin: 30px 0;
        }

        .action-card {
            padding: 25px;
            border-radius: 10px;
            text-align: center;
            transition: all 0.2s;
            text-decoration: none;
            color: inherit;
            display: block;
        }

        .action-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(0,0,0,0.1);
        }

        .action-card h3 {
            margin: 0 0 10px 0;
            font-size: 1.3em;
        }

        .action-card p {
            margin: 0 0 15px 0;
            color: #666;
        }

        .action-card.chat {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: 2px solid transparent;
        }

        .action-card.chat:hover {
            border: 2px solid #667eea;
        }

        .action-card.chat p {
            color: rgba(255,255,255,0.9);
        }

        .action-card.documents {
            background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
            color: white;
            border: 2px solid transparent;
        }

        .action-card.documents:hover {
            border: 2px solid #f093fb;
        }

        .action-card.documents p {
            color: rgba(255,255,255,0.9);
        }

        .action-card.docs {
            background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            color: white;
            border: 2px solid transparent;
        }

        .action-card.docs:hover {
            border: 2px solid #4facfe;
        }

        .action-card.docs p {
            color: rgba(255,255,255,0.9);
        }

        .btn {
            display: inline-block;
            background: rgba(255,255,255,0.2);
            color: white;
            padding: 10px 20px;
            border-radius: 25px;
            text-decoration: none;
            font-weight: 500;
            transition: all 0.2s;
            border: 1px solid rgba(255,255,255,0.3);
        }

        .btn:hover {
            background: rgba(255,255,255,0.3);
            transform: scale(1.05);
        }

        .api-section {
            margin-top: 40px;
        }

        .api-section h2 {
            color: #007AFF;
            margin-bottom: 20px;
        }

        .endpoint {
            margin: 20px 0;
            padding: 20px;
            background: #f8f9fa;
            border-left: 4px solid #007AFF;
            border-radius: 0 8px 8px 0;
        }

        .method {
            display: inline-block;
            padding: 4px 10px;
            border-radius: 4px;
            font-weight: bold;
            font-size: 0.9em;
            margin-right: 10px;
        }

        .method.post { background: #28a745; color: white; }
        .method.get { background: #007bff; color: white; }
        .method.delete { background: #dc3545; color: white; }

        pre {
            background: #2d3748;
            color: #e2e8f0;
            padding: 15px;
            border-radius: 8px;
            overflow-x: auto;
            line-height: 1.4;
            margin: 10px 0;
        }

        .features {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 15px;
            margin: 20px 0;
        }

        .feature {
            background: #f8f9fa;
            padding: 15px;
            border-radius: 8px;
            border-left: 4px solid #007AFF;
        }

        .feature h4 {
            margin: 0 0 8px 0;
            color: #007AFF;
        }

        .feature p {
            margin: 0;
            font-size: 0.9em;
            color: #666;
        }

        .footer {
            text-align: center;
            margin-top: 40px;
            padding: 20px;
            color: #666;
            font-size: 0.9em;
        }
    </style>
</head>
<body>
    <div class="nav-header">
        <a href="/" class="logo">üöÄ Lil-RAG</a>
        <div class="nav-links">
            <a href="/" class="nav-link active">üè† Home</a>
            <a href="/chat" class="nav-link">üí¨ Chat</a>
            <a href="/documents" class="nav-link">üìö Documents</a>
        </div>
    </div>
    <div class="container">
        <h1>üöÄ Lil-RAG</h1>
        <p class="subtitle">
            A simple yet powerful RAG (Retrieval Augmented Generation) system built with Go, SQLite, and Ollama
        </p>
        
        <div class="quick-actions">
            <a href="/chat" class="action-card chat">
                <h3>üí¨ Interactive Chat</h3>
                <p>Ask questions about your documents in a user-friendly chat interface</p>
                <span class="btn">Start Chatting</span>
            </a>
            
            <a href="/documents" class="action-card documents">
                <h3>üìö Document Library</h3>
                <p>View, manage, and organize all your indexed documents</p>
                <span class="btn">Browse Documents</span>
            </a>
            
            <a href="/docs" class="action-card docs">
                <h3>üìñ Documentation</h3>
                <p>Complete API reference and usage guides for all interfaces</p>
                <span class="btn">View Documentation</span>
            </a>
        </div>

        <div class="api-section">
            <h2>üåü Key Features</h2>
            <div class="features">
                <div class="feature">
                    <h4>üîç Semantic Search</h4>
                    <p>Advanced similarity search using SQLite with sqlite-vec</p>
                </div>
                <div class="feature">
                    <h4>üìÑ Multi-Format</h4>
                    <p>Support for PDF, DOCX, XLSX, HTML, CSV, and text files</p>
                </div>
                <div class="feature">
                    <h4>üí¨ Chat Interface</h4>
                    <p>Interactive chat with RAG context and source citations</p>
                </div>
                <div class="feature">
                    <h4>üóúÔ∏è Smart Storage</h4>
                    <p>Automatic compression and deduplication</p>
                </div>
                <div class="feature">
                    <h4>üîß Multiple APIs</h4>
                    <p>CLI, HTTP REST API, and MCP server interfaces</p>
                </div>
                <div class="feature">
                    <h4>‚ö° High Performance</h4>
                    <p>Optimized Go implementation with efficient caching</p>
                </div>
            </div>
        </div>

        <div class="api-section">
            <h2>üåê API Quick Reference</h2>
            
            <div class="endpoint">
                <h3><span class="method post">POST</span> /api/index</h3>
                <p>Index text content or upload files for processing</p>
                <pre>// JSON
{"id": "doc1", "text": "Your content here"}

// File Upload (multipart/form-data)
curl -F "id=doc2" -F "file=@document.pdf" /api/index</pre>
            </div>
            
            <div class="endpoint">
                <h3><span class="method get">GET</span> <span class="method post">POST</span> /api/search</h3>
                <p>Search for similar content using semantic similarity</p>
                <pre>// GET: /api/search?query=hello&limit=10
// POST: {"query": "your search query", "limit": 10}</pre>
            </div>
            
            <div class="endpoint">
                <h3><span class="method post">POST</span> /api/chat</h3>
                <p>Interactive chat with RAG context and source citations</p>
                <pre>{"message": "What is machine learning?", "limit": 5}</pre>
            </div>
            
            <div class="endpoint">
                <h3><span class="method get">GET</span> /api/documents</h3>
                <p>List all indexed documents with metadata</p>
            </div>
            
            <div class="endpoint">
                <h3><span class="method delete">DELETE</span> /api/documents/{id}</h3>
                <p>Delete a specific document and all its chunks</p>
            </div>
            
            <div class="endpoint">
                <h3><span class="method get">GET</span> /api/health</h3>
                <p>System health check and status</p>
            </div>
        </div>
    </div>

    <div class="footer">
        <p>
            üìö Lil-RAG v` + h.version + ` | Built with Go, SQLite, and Ollama | 
            <a href="/docs" style="color: #007AFF;">Full Documentation</a>
        </p>
    </div>
</body>
</html>`

		w.Header().Set("Content-Type", "text/html")
		if _, err := w.Write([]byte(html)); err != nil {
			// Log error but don't change response at this point
			fmt.Printf("Error writing response: %v\n", err)
		}
	}
}

// DocumentsList serves a web page with a table view of all documents at /documents
func (h *Handler) DocumentsList() http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		if r.Method != http.MethodGet {
			h.writeError(w, http.StatusMethodNotAllowed, "method not allowed", "")
			return
		}

		// Use new template system if available
		if h.renderer != nil {
			data := &theme.TemplateData{
				Title:   "Documents",
				Version: h.version,
				PageName: "documents",
			}
			
			w.Header().Set("Content-Type", "text/html")
			if err := h.renderer.RenderPage(w, "documents.html", data); err != nil {
				log.Printf("Template rendering error: %v", err)
				h.fallbackDocumentsPage(w, r)
			}
			return
		}
		
		// Fallback to original HTML
		h.fallbackDocumentsPage(w, r)
	}
}

// fallbackDocumentsPage serves the original documents page HTML as fallback
func (h *Handler) fallbackDocumentsPage(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Content-Type", "text/html")
		html := `<!DOCTYPE html>
<html>
<head>
    <title>Documents - LilRag</title>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 1000px;
            margin: 0 auto;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }
        
        .documents-container {
            width: 100%;
            max-width: 100%;
            height: auto;
            background: white;
            border-radius: 15px;
            box-shadow: 0 8px 25px rgba(0,0,0,0.15);
            overflow: hidden;
            display: flex;
            flex-direction: column;
        }
        
        .documents-header {
            background: white;
            padding: 30px;
            border-bottom: 1px solid #e9ecef;
            position: relative;
        }
        
        .documents-title {
            font-size: 1.8em;
            margin: 0 0 10px 0;
            color: #333;
            text-align: center;
        }
        
        .documents-content {
            background: white;
            padding: 30px;
            flex: 1;
            overflow-y: auto;
        }
        
        .loading {
            text-align: center;
            color: #666;
            font-size: 1.1em;
            padding: 40px;
        }
        
        .error {
            background: #f8d7da;
            color: #721c24;
            padding: 20px;
            border-radius: 8px;
            margin: 20px 0;
        }
        
        .documents-table {
            width: 100%;
            border-collapse: collapse;
            background: white;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }
        
        .documents-table th {
            background: #f8f9fa;
            padding: 15px 12px;
            text-align: left;
            font-weight: 600;
            color: #333;
            border-bottom: 2px solid #dee2e6;
        }
        
        .documents-table td {
            padding: 12px;
            border-bottom: 1px solid #dee2e6;
            vertical-align: top;
        }
        
        .documents-table tr:hover {
            background: #f8f9fa;
        }
        
        .doc-id {
            font-family: 'Courier New', monospace;
            color: #007bff;
            font-weight: 500;
        }
        
        .doc-title {
            font-weight: 500;
            color: #333;
        }
        
        .doc-time {
            color: #666;
            font-size: 0.9em;
        }
        
        .action-button {
            padding: 6px 12px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            text-decoration: none;
            display: inline-block;
            font-size: 0.85em;
            font-weight: 500;
            transition: all 0.2s ease;
        }
        
        .view-button {
            background: #28a745;
            color: white;
            margin-right: 8px;
        }
        
        .view-button:hover {
            background: #218838;
            transform: translateY(-1px);
        }
        
        .delete-button {
            background: #dc3545;
            color: white;
        }
        
        .delete-button:hover {
            background: #c82333;
            transform: translateY(-1px);
        }
        
        .delete-button:disabled {
            background: #6c757d;
            cursor: not-allowed;
        }
        
        .empty-state {
            text-align: center;
            padding: 60px 20px;
            color: #666;
        }
        
        .empty-state h3 {
            margin: 0 0 15px 0;
            color: #333;
        }
        
        @media (max-width: 768px) {
            .documents-container {
                margin: 10px;
                width: calc(100% - 20px);
                min-height: calc(100vh - 20px);
            }
            
            .nav-buttons {
                position: relative;
                top: 0;
                left: 0;
                margin-bottom: 20px;
            }
            
            .documents-title {
                text-align: left;
            }
            
            .documents-table {
                font-size: 0.9em;
            }
            
            .documents-table th,
            .documents-table td {
                padding: 8px 6px;
            }
        }
        
        .nav-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            background: rgba(255,255,255,0.1);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 15px 25px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        }

        .nav-links {
            display: flex;
            gap: 15px;
        }

        .nav-link {
            color: white;
            text-decoration: none;
            padding: 8px 16px;
            border-radius: 8px;
            font-weight: 500;
            transition: all 0.2s ease;
            background: rgba(255,255,255,0.1);
            border: 1px solid rgba(255,255,255,0.2);
        }

        .nav-link:hover {
            background: rgba(255,255,255,0.2);
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(255,255,255,0.2);
        }

        .nav-link.active {
            background: rgba(255,255,255,0.3);
            border-color: rgba(255,255,255,0.4);
        }

        .logo {
            color: white;
            font-size: 1.2em;
            font-weight: 700;
            text-decoration: none;
        }

        .container {
            background: white;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            padding: 40px;
            margin-bottom: 20px;
        }
    </style>
</head>
<body>
    <div class="nav-header">
        <a href="/" class="logo">üöÄ Lil-RAG</a>
        <div class="nav-links">
            <a href="/" class="nav-link">üè† Home</a>
            <a href="/chat" class="nav-link">üí¨ Chat</a>
            <a href="/documents" class="nav-link active">üìö Documents</a>
        </div>
    </div>
    <div class="container">
        <div class="documents-container">
        <div class="documents-header">
            <h1 class="documents-title">üìö Documents</h1>
        </div>
        
        <div class="documents-content">
            <div class="loading" id="loading">Loading documents...</div>
            <div class="error" id="error" style="display: none;"></div>
            <div id="documents-container" style="display: none;">
                <table class="documents-table">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Title</th>
                            <th>Type</th>
                            <th>Chunks</th>
                            <th>Indexed</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="documents-body">
                    </tbody>
                </table>
            </div>
            <div class="empty-state" id="empty-state" style="display: none;">
                <h3>No documents found</h3>
                <p>Upload your first document to get started.</p>
            </div>
        </div>
    </div>

    <script>
        async function loadDocuments() {
            try {
                const response = await fetch('/api/documents');
                if (!response.ok) {
                    throw new Error('Failed to fetch documents');
                }
                
                const data = await response.json();
                displayDocuments(data.documents || data);
            } catch (error) {
                showError('Failed to load documents: ' + error.message);
            }
        }
        
        function displayDocuments(documents) {
            const loading = document.getElementById('loading');
            const errorDiv = document.getElementById('error');
            const container = document.getElementById('documents-container');
            const emptyState = document.getElementById('empty-state');
            const tbody = document.getElementById('documents-body');
            
            loading.style.display = 'none';
            errorDiv.style.display = 'none';
            
            if (!documents || documents.length === 0) {
                emptyState.style.display = 'block';
                return;
            }
            
            container.style.display = 'block';
            tbody.innerHTML = '';
            
            documents.forEach(doc => {
                const row = document.createElement('tr');
                row.innerHTML = ` + "`" + `
                    <td><span class="doc-id">${escapeHtml(doc.id)}</span></td>
                    <td><span class="doc-title">${escapeHtml(doc.id)}</span></td>
                    <td>${escapeHtml(doc.doc_type || 'text')}</td>
                    <td>${doc.chunk_count || 0}</td>
                    <td><span class="doc-time">${formatDate(doc.created_at)}</span></td>
                    <td>
                        <a href="/view/${escapeHtml(doc.id)}" class="action-button view-button">View</a>
                        <button class="action-button delete-button" 
                                onclick="deleteDocument('${escapeHtml(doc.id)}')">Delete</button>
                    </td>
                ` + "`" + `;
                tbody.appendChild(row);
            });
        }
        
        function showError(message) {
            const loading = document.getElementById('loading');
            const errorDiv = document.getElementById('error');
            
            loading.style.display = 'none';
            errorDiv.textContent = message;
            errorDiv.style.display = 'block';
        }
        
        function escapeHtml(unsafe) {
            return unsafe
                .replace(/&/g, "&amp;")
                .replace(/</g, "&lt;")
                .replace(/>/g, "&gt;")
                .replace(/"/g, "&quot;")
                .replace(/'/g, "&#039;");
        }
        
        function formatDate(dateString) {
            if (!dateString) return 'Unknown';
            const date = new Date(dateString);
            return date.toLocaleString();
        }
        
        async function deleteDocument(docId) {
            if (!confirm('Are you sure you want to delete this document? This action cannot be undone.')) {
                return;
            }
            
            const button = event.target;
            button.disabled = true;
            button.textContent = 'Deleting...';
            
            try {
                const response = await fetch('/api/documents/' + encodeURIComponent(docId), {
                    method: 'DELETE'
                });
                
                if (!response.ok) {
                    throw new Error('Failed to delete document');
                }
                
                // Reload the documents list
                loadDocuments();
            } catch (error) {
                alert('Failed to delete document: ' + error.message);
                button.disabled = false;
                button.textContent = 'Delete';
            }
        }
        
        // Load documents when page loads
        loadDocuments();
    </script>
    </div>
</body>
</html>`

		if _, err := w.Write([]byte(html)); err != nil {
			log.Printf("Failed to write HTML response: %v", err)
		}
	}
}

// Documentation serves the documentation page at /docs
func (h *Handler) Documentation() http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		if r.Method != http.MethodGet {
			h.writeError(w, http.StatusMethodNotAllowed, "method_not_allowed", "Only GET method is allowed")
			return
		}

		w.Header().Set("Content-Type", "text/html; charset=utf-8")

		html := `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Lil-RAG Documentation</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            background: #f8f9fa;
        }

        .container {
            background: white;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            padding: 40px;
            margin-bottom: 20px;
        }

        h1, h2, h3 {
            color: #2c3e50;
            margin-top: 0;
        }

        h1 {
            border-bottom: 3px solid #007AFF;
            padding-bottom: 10px;
            margin-bottom: 30px;
        }

        h2 {
            color: #007AFF;
            margin-top: 30px;
            margin-bottom: 15px;
        }

        .nav {
            background: #f1f3f5;
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 30px;
        }

        .nav ul {
            list-style: none;
            padding: 0;
            margin: 0;
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 10px;
        }

        .nav li {
            margin: 0;
        }

        .nav a {
            color: #007AFF;
            text-decoration: none;
            font-weight: 500;
            display: block;
            padding: 8px 12px;
            border-radius: 4px;
            transition: background-color 0.2s;
        }

        .nav a:hover {
            background: #e3f2fd;
        }

        .endpoint {
            background: #f8f9fa;
            border-left: 4px solid #007AFF;
            margin: 20px 0;
            padding: 15px;
            border-radius: 0 8px 8px 0;
        }

        .method {
            display: inline-block;
            padding: 4px 8px;
            border-radius: 4px;
            font-weight: bold;
            font-size: 0.9em;
            margin-right: 10px;
        }

        .method.post { background: #28a745; color: white; }
        .method.get { background: #007bff; color: white; }
        .method.delete { background: #dc3545; color: white; }

        pre {
            background: #2d3748;
            color: #e2e8f0;
            padding: 15px;
            border-radius: 8px;
            overflow-x: auto;
            line-height: 1.4;
        }

        code {
            background: #e3f2fd;
            padding: 2px 6px;
            border-radius: 3px;
            font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
            color: #1976d2;
        }

        pre code {
            background: none;
            padding: 0;
            color: inherit;
        }

        .feature {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 20px;
            border-radius: 8px;
            margin: 15px 0;
        }

        .feature h3 {
            color: white;
            margin-top: 0;
        }

        .interface-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin: 20px 0;
        }

        .interface-card {
            background: white;
            border: 2px solid #e9ecef;
            border-radius: 8px;
            padding: 20px;
            transition: all 0.2s;
        }

        .interface-card:hover {
            border-color: #007AFF;
            box-shadow: 0 4px 12px rgba(0,122,255,0.15);
        }

        .interface-card h3 {
            color: #007AFF;
            margin-top: 0;
        }

        .command-list {
            background: #f8f9fa;
            padding: 15px;
            border-radius: 8px;
            margin: 10px 0;
        }

        .command-list ul {
            margin: 0;
            padding-left: 20px;
        }

        .badge {
            display: inline-block;
            padding: 2px 8px;
            background: #007AFF;
            color: white;
            border-radius: 12px;
            font-size: 0.8em;
            font-weight: 500;
            margin-left: 8px;
        }

        .footer {
            text-align: center;
            margin-top: 40px;
            padding: 20px;
            color: #666;
            font-size: 0.9em;
        }

        .back-link {
            display: inline-block;
            margin-bottom: 20px;
            color: #007AFF;
            text-decoration: none;
            font-weight: 500;
        }

        .back-link:hover {
            text-decoration: underline;
        }
    </style>
</head>
<body>
    <div class="container">
        <a href="/" class="back-link">‚Üê Back to Home</a>
        
        <h1>üöÄ Lil-RAG Documentation</h1>
        
        <p>
            Complete documentation for Lil-RAG - A simple yet powerful RAG (Retrieval Augmented Generation) 
            system built with Go, SQLite, and Ollama.
        </p>

        <div class="nav">
            <ul>
                <li><a href="#features">‚ú® Features</a></li>
                <li><a href="#interfaces">üîó Interfaces</a></li>
                <li><a href="#http-api">üåê HTTP API</a></li>
                <li><a href="#cli">üíª CLI Usage</a></li>
                <li><a href="#mcp">üîå MCP Server</a></li>
                <li><a href="#config">‚öôÔ∏è Configuration</a></li>
            </ul>
        </div>

        <section id="features">
            <h2>‚ú® Features</h2>
            
            <div class="interface-grid">
                <div class="feature">
                    <h3>üîç Semantic Vector Search</h3>
                    <p>
                        Advanced similarity search using SQLite with sqlite-vec extension for fast, accurate retrieval.
                    </p>
                </div>
                
                <div class="feature">
                    <h3>üìÑ Multi-Format Support</h3>
                    <p>Native support for PDF, DOCX, XLSX, HTML, CSV, and text files with intelligent parsing.</p>
                </div>
                
                <div class="feature">
                    <h3>üí¨ Interactive Chat</h3>
                    <p>Chat functionality with RAG context, providing responses with relevant source citations.</p>
                </div>
                
                <div class="feature">
                    <h3>üóúÔ∏è Smart Compression</h3>
                    <p>Automatic gzip compression and deduplication for optimal storage efficiency.</p>
                </div>
            </div>
        </section>

        <section id="interfaces">
            <h2>üîó Available Interfaces</h2>
            
            <div class="interface-grid">
                <div class="interface-card">
                    <h3>üíª Command Line Interface</h3>
                    <p>Full-featured CLI with commands for indexing, searching, chatting, and document management.</p>
                    <div class="command-list">
                        <strong>Commands:</strong>
                        <ul>
                            <li><code>index</code> - Index documents</li>
                            <li><code>search</code> - Search content</li>
                            <li><code>chat</code> - Interactive chat</li>
                            <li><code>documents</code> - List documents</li>
                            <li><code>delete</code> - Remove documents</li>
                            <li><code>health</code> - System status</li>
                        </ul>
                    </div>
                </div>

                <div class="interface-card">
                    <h3>üåê HTTP API Server</h3>
                    <p>RESTful API with web interface for integration and interactive usage.</p>
                    <div class="command-list">
                        <strong>Endpoints:</strong>
                        <ul>
                            <li><code>/api/index</code> - Index content</li>
                            <li><code>/api/search</code> - Search documents</li>
                            <li><code>/api/chat</code> - Chat interface</li>
                            <li><code>/api/documents</code> - Document management</li>
                            <li><code>/api/health</code> - Health check</li>
                        </ul>
                    </div>
                </div>

                <div class="interface-card">
                    <h3>üîå MCP Server</h3>
                    <p>Model Context Protocol server for integration with AI assistants and tools.</p>
                    <div class="command-list">
                        <strong>Tools:</strong>
                        <ul>
                            <li><code>lilrag_index</code> - Index content</li>
                            <li><code>lilrag_search</code> - Search documents</li>
                            <li><code>lilrag_chat</code> - Chat with context</li>
                            <li><code>lilrag_list_documents</code> - List documents</li>
                            <li><code>lilrag_delete_document</code> - Delete documents</li>
                        </ul>
                    </div>
                </div>
            </div>
        </section>

        <section id="http-api">
            <h2>üåê HTTP API Reference</h2>
            
            <div class="endpoint">
                <h3><span class="method post">POST</span> /api/index</h3>
                <p>Index text content or upload files for processing.</p>
                <pre><code>curl -X POST http://localhost:8080/api/index \\
  -H "Content-Type: application/json" \\
  -d '{"id": "doc1", "text": "Your content here"}'

# File upload
curl -X POST http://localhost:8080/api/index \\
  -F "id=doc2" \\
  -F "file=@document.pdf"</code></pre>
            </div>

            <div class="endpoint">
                <h3><span class="method get">GET</span> <span class="method post">POST</span> /api/search</h3>
                <p>Search for similar content using semantic similarity.</p>
                <pre><code># GET request
curl "http://localhost:8080/api/search?query=machine%20learning&limit=5"

# POST request  
curl -X POST http://localhost:8080/api/search \\
  -H "Content-Type: application/json" \\
  -d '{"query": "artificial intelligence", "limit": 3}'</code></pre>
            </div>

            <div class="endpoint">
                <h3><span class="method post">POST</span> /api/chat</h3>
                <p>Interactive chat with RAG context and source citations.</p>
                <pre><code>curl -X POST http://localhost:8080/api/chat \\
  -H "Content-Type: application/json" \\
  -d '{"message": "What is machine learning?", "limit": 5}'</code></pre>
            </div>

            <div class="endpoint">
                <h3><span class="method get">GET</span> /api/documents</h3>
                <p>List all indexed documents with metadata.</p>
                <pre><code>curl http://localhost:8080/api/documents</code></pre>
            </div>

            <div class="endpoint">
                <h3><span class="method delete">DELETE</span> /api/documents/{id}</h3>
                <p>Delete a specific document and all its chunks.</p>
                <pre><code>curl -X DELETE http://localhost:8080/api/documents/doc1</code></pre>
            </div>

            <div class="endpoint">
                <h3><span class="method get">GET</span> /api/health</h3>
                <p>System health check endpoint.</p>
                <pre><code>curl http://localhost:8080/api/health</code></pre>
            </div>
        </section>

        <section id="cli">
            <h2>üíª CLI Usage</h2>
            
            <h3>Installation & Setup</h3>
            <pre><code># Build from source
make build

# Initialize configuration
./bin/lil-rag config init

# Check configuration
./bin/lil-rag config show</code></pre>

            <h3>Document Management</h3>
            <pre><code># Index text content (ID auto-generated)
./bin/lil-rag index "Your content here"

# Index with explicit ID
./bin/lil-rag index doc1 "Your content here"

# Index a PDF file (ID auto-generated)  
./bin/lil-rag index document.pdf

# Index a PDF file with explicit ID
./bin/lil-rag index doc2 document.pdf

# Index from stdin (ID auto-generated)
echo "Content" | ./bin/lil-rag index -

# Index from stdin with explicit ID
echo "Content" | ./bin/lil-rag index doc3 -

# List all documents
./bin/lil-rag documents

# Delete a document
./bin/lil-rag delete doc1 --force</code></pre>

            <h3>Search & Chat</h3>
            <pre><code># Search for content
./bin/lil-rag search "machine learning" 5

# Interactive chat
./bin/lil-rag chat "What is AI?" 3

# Check system health
./bin/lil-rag health</code></pre>

            <h3>Configuration</h3>
            <pre><code># Set Ollama endpoint
./bin/lil-rag config set ollama.endpoint http://localhost:11434

# Set embedding model
./bin/lil-rag config set ollama.model nomic-embed-text

# Set chat model
./bin/lil-rag config set ollama.chat-model llama3.2</code></pre>
        </section>

        <section id="mcp">
            <h2>üîå MCP Server</h2>
            
            <p>The MCP server provides tools for AI assistants to interact with your RAG system.</p>

            <h3>Available Tools</h3>
            <div class="command-list">
                <ul>
                    <li><strong>lilrag_index</strong> - Index text content</li>
                    <li><strong>lilrag_index_file</strong> - Index files (PDF, DOCX, etc.)</li>
                    <li><strong>lilrag_search</strong> - Semantic search</li>
                    <li><strong>lilrag_chat</strong> - Chat with RAG context</li>
                    <li><strong>lilrag_list_documents</strong> - List all documents</li>
                    <li><strong>lilrag_delete_document</strong> - Delete documents</li>
                </ul>
            </div>

            <h3>Configuration</h3>
            <p>
                The MCP server uses the same profile configuration as the CLI and HTTP server, 
                or falls back to environment variables:
            </p>
            <pre><code>LILRAG_DB_PATH=/path/to/database.db
LILRAG_OLLAMA_URL=http://localhost:11434
LILRAG_MODEL=nomic-embed-text</code></pre>
        </section>

        <section id="config">
            <h2>‚öôÔ∏è Configuration</h2>
            
            <p>Lil-RAG uses profile-based configuration stored in <code>~/.lilrag/config.json</code>.</p>

            <h3>Configuration Keys</h3>
            <div class="command-list">
                <ul>
                    <li><code>ollama.endpoint</code> - Ollama server URL</li>
                    <li><code>ollama.model</code> - Embedding model name</li>
                    <li><code>ollama.chat-model</code> - Chat model name</li>
                    <li><code>ollama.vector-size</code> - Vector dimension size</li>
                    <li><code>storage.path</code> - Database file path</li>
                    <li><code>data.dir</code> - Data directory path</li>
                    <li><code>server.host</code> - HTTP server host</li>
                    <li><code>server.port</code> - HTTP server port</li>
                    <li><code>chunking.max-tokens</code> - Max tokens per chunk</li>
                    <li><code>chunking.overlap</code> - Token overlap between chunks</li>
                </ul>
            </div>

            <h3>Example Configuration</h3>
            <pre><code>{
  "ollama": {
    "endpoint": "http://localhost:11434",
    "embedding_model": "nomic-embed-text",
    "chat_model": "llama3.2",
    "vector_size": 768
  },
  "storage_path": "~/.lilrag/data/lilrag.db",
  "data_dir": "~/.lilrag/data",
  "server": {
    "host": "localhost",
    "port": 8080
  },
  "chunking": {
    "max_tokens": 200,
    "overlap": 50
  }
}</code></pre>
        </section>
    </div>

    <div class="footer">
        <p>
            üìö Lil-RAG v` + h.version + ` | 
            <a href="https://github.com/your-username/lil-rag" style="color: #007AFF;">GitHub Repository</a>
        </p>
    </div>
</body>
</html>`

		if _, err := w.Write([]byte(html)); err != nil {
			h.writeError(w, http.StatusInternalServerError, "write_error", "Failed to write response")
			return
		}
	}
}